package com.sg.jdbctcomplexexample.dao;

import com.sg.jdbctcomplexexample.entity.Room;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

/**
 *
 * @author jake
 */

// class needs to be annotated as @Repository since we're using annotation-based dependency injection
@Repository
public class RoomDaoDB implements RoomDao{
    
    @Autowired
    JdbcTemplate jdbc;
    
    /* this mapper is made public so it can be accessed to add a Room object
    to a Meeting object in the MeetingDao
    */
    public static final class RoomMapper implements RowMapper<Room>{
        @Override
        public Room mapRow(ResultSet rs, int index) throws SQLException{
            Room rm = new Room();
            rm.setId(rs.getInt("id"));
            rm.setName(rs.getString("name"));
            rm.setDescription(rs.getString("description"));

            return rm;
        }
    }
    
    @Override
    public List<Room> getAllRooms(){
        // create String to query for all room data
        final String SELECT_ALL_ROOMS = "SELECT * FROM room";
        // run the query and return the results to a List<Room>
        return jdbc.query(SELECT_ALL_ROOMS, new RoomMapper());
    }

    @Override
    public Room getRoomById(int id) {
        // queryForObject() throws an Exception if no object is returned from the query (doesn't query() throw this also???)
        try{
            final String SELECT_ROOM_BY_ID = "SELECT * FROM room WHERE ID = ?";
            return jdbc.queryForObject(SELECT_ROOM_BY_ID, new RoomMapper(), id);
        }
        // if query does not work for some reason:
        catch(DataAccessException e){
            return null;    // null is returned to indicate that the object couldn't be retrieved
        }
    }

    @Override
    @Transactional  /* this annotation is here because the Room being passed in
                        will not have an ID, but the one returned will have the ID
                        the DB assigns to it.
                        MEANS THAT EVERY QUERY RUN IN THIS METHOD IS PART OF ONE
                        TRANSACTION. THEREFORE IF ONE FAILS, ALL PREVIOUS AND FUTURE
                        ONES WILL FAIL/BE ROLLED BACK. Also ensures the "ID-getting query"
                        will retrieve the ID generated by the "INSERT query"
                    */
    public Room addRoom(Room room) {
        final String INSERT_ROOM = "INSERT INTO room(name, description) VALUES(?, ?)";
        jdbc.update(INSERT_ROOM, room.getName(), room.getDescription());
        
        // the SELECT statement below is a function that comes with SQL
        int newId = jdbc.queryForObject("SELECT LAST_INSERT_ID()", Integer.class); // 2nd parameter for this signature needs the type of object being returned
        room.setId(newId);
        return room;
    }

    @Override
    public void updateRoom(Room room) {
        final String UPDATE_ROOM = "UPDATE ROOM SET name = ?, description = ? WHERE id = ?";
        jdbc.update(UPDATE_ROOM, room.getName(), room.getDescription(), room.getId());
    }

    @Override
    @Transactional // reference addRoom() for the annotation explanation
    public void deleteRoomById(int id) {
        // delete the bridge table entry first!
        final String DELETE_MEETING_EMPLOYEE_BY_ROOM = "DELETE me.* "
                + "FROM meeting_employee me " + "JOIN meeting m "
                + "ON me.meetingID = m.ID WHERE m.roomID = ?";
        jdbc.update(DELETE_MEETING_EMPLOYEE_BY_ROOM, id);
        
        final String DELETE_MEETING_BY_ROOM = "DELETE FROM meeting WHERE roomID = ?";
        jdbc.update(DELETE_MEETING_BY_ROOM, id);
        
        final String DELETE_ROOM = "DELETE FROM room WHERE ID = ?";
        jdbc.update(DELETE_ROOM, id);
    }
   
}
